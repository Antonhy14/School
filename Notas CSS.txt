---------------------------------------------------------CSS-----------------------------------------------------------------
|															   
|						**Propiedades de texto**						   
|   Tamaño de la letra: font-size: medida;										   
|   Tipografía: font-family: 'nombre',alternativo; (Se pueden obtener de Google Fonts)					   
|   Color: color: #color;												   
|   Altura:  line-height: veces de la letra;										   
|   Grozor: font-weigth: tamaño(depende de la tipografía la diferencia)							   
|															   
|							**Cajas**							   
|  Inline: 														   
|	- Pueden acomodarse unas a lado de otras.									   
|	- Ocupan solo el espacio del contenido.										   
|	- No se les puede dar ni height ni width.									   
|  Block:														   
|	- Ocupan todo el ancho del contenedor , así, que no se pueden acomodar al lado de otra.				   
|	- Se les puede definir su height y width.									   
|															   
|						**Propiedades de cajas**						   
|   Padding: 														   
|	- Es la distancia entre el texto y los bordes de la caja. 							   
|	- Hay 4 tipos de padding: top, right, bottom y left.								   
|  Height(alto) y Width(ancho):												   
|		- Es el ancho y la largo de la caja.									   
|  Box-sizing:														   
|	- Border-box: toma punto de referencia la caja contenedora.							   
|	- Content-box: se agrega con al padding del contenido.								   
|  Margin:														   
|	- Es la distancia entre las cajas(que esten alado o las contenedoras).					
|	- Hay 4 tipos de margin: top, right, bottom y left.
|	- Con auto se centra, pero solo a los lados.
|  Border: 
|	- Border-radius: que tan redondeado es el borde(puede ser en cualquier unidad).
|	- border: la medida | el tipo(normalmente es solid) | el color;
|  Box-model:
|	- Es todo lo que constituye al contenido, es decir, el content, padding, border y margin. Y estos van en una 
|	  jerarquía.
|	- Content: es el contenido y el primero que va, se edita con: line-heigt: ;
|	- Padding: es el segundo que va.
|	- Border: es el que sigue en la jerarquía.
|	- Margin: es el último en la jerarquía.
|  Box-shadow y text-shadow:
|	- Es las sombras de la caja o del texto.
|	- Se puede intensificar poniendo una coma y volviedo a poner el codigo(1px 1px 5px 0 #fff, 1px 1px 5px 0 #fff).
|  Outline:
|	- Es como un borde que sirve para resaltar la caja ya que no ocupa espacio.
|	- También es lo que usa un input.
|
|						     **Position**
|  - Al posicionar un objeto adquiere propiedades: top, right, bottom, left y z-index. Y afecta al flujo del HTML
|   - Las propiedades top y left son las más importantes, así que, si se definen estás el right y bottom son inútiles
|     (aplica en todos).
|  Z-index:
|	- Es como se posiciona hacia enfrente y atras, quien tenga un valor mayor estará más al frente.
|	- Por general, cuando se define se deja unos cuantos espacio para poder definir después si se ocupa.
|  Static: 
|	- No esta posicionado.
|  Relative:
|	- Sigue conservando el espacio asignado.
|  Absolute:
|	- Pierde el espacio reservado que tenía.
|	- El punto de referencia es el contenedor siempre y cuando no se defina top o left, si se definen el punto de 
|	  referencia es el viewport.
|	- Pero si el contenedor esta posicionado, se tomará como punto de referencia.
|	- Sea un elemento inline o block, el ancho se ajusta al contenido.
|  Fixed:
|	- Queda fijado en un sitio.
|	- Tiene las mismas características de absolute.
|  Sticky:
|	- Funciona como un fixed y absolute a la vez, ya que queda fijo pero mantiene su espacio reservado.
|	- Queda fijo una vez llegamos al apartado donde lo definimos.
|						    	**Display**
|  Block:
|	- Ocupan todo el ancho del contenedor , así, que no se pueden acomodar al lado de otra.
|	- Se les puede definir su height y width.
|  Inline: 														   
|	- Pueden acomodarse unas a lado de otras.									   
|	- Ocupan solo el espacio del contenido.										   
|	- No se les puede dar ni height ni width.
|  Inline-block
|	- Se puede definir un width y height.
|	- Se puede poner un elemento a lado de este.
|	- Se ajusta al contenido.
|							**Overflow**
|  - Es lo sobra o sobresale de la pantalla.
|  - El valor por defecto es visible, es decir, que deja que se sobre salga.
|  Hidden:
|	_ Recorta el espacio que sobre sale
|  Auto:
|	- Detecta si es necesario y si si nos deja hacer scroll en la caja sin que el texto se sobre salga.
|  Scroll:
|	- Pone la barra de scroll aunque no sea necesaria.
|
|							**Pseudoelementos**
|  - Se requiere de la etiqueta content no forma parte del DOM.
|  - NO FUNCIONA EN INLINE.
|  ::first-line: Para editar la primera linea del texto.
|  ::first-letter: Para editar la primera letra del texto.
|
|  ::placeholder: Para editar el texto de fondo de los input.
|  ::selection: Para editar cuando se selecciona un texto.
|  - Se crean como "hijos" del elemento al que se aplican. Y funciona en todos los tipos.
|  - Agregan texto en la caja.
|  ::after: Lo agrega después del elemento.
|  ::before: Lo agrega antes del elemento.
|  - Y se les puede editar las propiedades del texto.
|							    **Pseudoclases**
|  - Son escuchas de eventos.
|  :hover: escucha el evento cuando el mouse está encima.
|  :link: cambia el estilo de links no visitados.
|  :visited: cambia el estilo de links ya visitados.
|  - Puede que algunos cambios no los haga.
|  :active: cambia los estilos al apretar sobre el elemento.
|  :focus: cambia los estilos cuando el elemento esta enfocado. Generalmente los input.
|  :lang: cambia los estilos de un idioma. Se pasa por parámetros. ELEMENTO:lang(código de idoma), y el idioma se lo ponemos
|   nosotros en la etiqueta(<etiqueta lang="código de idioma"></etiqueta).
|  :valid: se aplica en los input y es para cambiar el estilo si el resultado es valido.
|							**Object fit**
|  - Se aplica a imágenes.
|  Contain: hace que el contenido se ajuste al contenedor.
|  Cover: se ajusta al contenedor, y recorta los bordes.
|  None: pone las resoluciones reales.
|  Scale-down: se queda con que el valor más pequeño de los anteriores.
|							**Object-position**
|  - Es para mover hacia algún lado la imágen.
|  - Se puede hacer con top,right,bottom,left o medidas.
|							    **Cursor**
|  - Es para cambiar el cursor cuando está en un elemento.
|  Cursor: nombre del cursor(https://www.w3schools.com/cssref/tryit.asp?filename=trycss_cursor).
|							  **Flexbox**
|  - Requiere de dos cosas: flex container(el contenedor) y flex item(los elementos dentro del flex container).
|  - Al darle "display: flex;" a un elemento no se afecta a el, sino a lo que está dentro. El contenedor estara en block.
|  - Tiene dos direcciones: el eje vertical llamado "cross axis" y el horizontal "main axis". Y a su vez tiene un lugar hacia
|    donde apuntan. El cross axis de cross-start(arriba) a cross-end(abajo). Y el main axis de main-start(izquierda) a main-
|    end(derecha).
|  - Y lo que se hace es alterar las direcciones de estos.
|  - También, los flex-item son solo los hijos directos de los flex-container.
|  - El margin funciona distinto. Si le damos margin auto se ira al lado contrario.
|  PROPIEDADES DE CONTENEDOR
|  Flex-direction:
|	- Cambia la dirección de las filas y columnas.
|	Row: hace que vaya como van las filas. Valor predeterminado.
|	Column: hace que vaya como van las columnas. 
|	Row o column- reverse: hace que vaya alrevez, es decir, de end a start.
|  Flex-wrap:
|	- Cambia si se respeta las medidas de la caja.
|	Wrap: Hace que si se mantengan las medidas hechando las cajas se vayan para abajo.
|	No wrap: No hace nada. Valor predeterminado.
|	Wrap-reverse. que se mantengas las medidas pero las cajas se vayan hacia arriba.
|  Flex-flow:
|	- Abrevia flex-direction y flex-wrap. flex-flow: column wrap-reverse; No usar si solo se va a cambiar uno.
|  Justify-content:  
|	- Cambia como se ordenan los elementos en el main axis.
|	Center: centra el contenedido, es decir, todas las cajas juntas.
|	Space-around: es como si le dieramos un margin porque se une el espacio entre estos.
|	Space-between: da el mayor espacio entre las cajas y no con el contenedor.
|	Space-evenly: da el mismo espacio entre las cajas y el contenedor.
|  Align-items:
|	- Cambia como se ordenan los elementos en el cross axis.
|	- Solo afecta si hay una linea.
|	Flex-start: se acomoda arriba.
|	Stretch: se estira a todo lo largo del cross axis.
|	Center: centra los items.
|	Baseline: se podría acomodar abajo y hacer que vaya subiendo con flex-wrap: wrap-reverse; 
|	Flex-end: se acomoda hasta debajo.
|	- Cuando hay más de una linea se deja un espacio entre las columnas.
|  Align-content:
|	- Interactúa igual que el align-items.
|	- Afecta cuando hay más de una linea.
|	- Se junta todo el contenido según esta ordenado.
|  PROPIEDADES DE ITEMS
|  Align-self: 
|	- Para alinearlo indivudualmente en el cross axis.
|  Flex-grow:
|	- Reparte el espacio que sobra lo reparte entre las cajas. Dependiendo el número que le pongamos, es decir, si es 1
|	  a cada elemento o individual se le dara un pedazo del sobrante, 2 pues 2 pedazos del sobrante.
|  	- Se suman todos los grows que se pongan y se dividen entre el espacio sobrante.
|  Flex-basis:
|	- Es el width para flexbox.
|  Flex-shrink:
|	- Es el espacio que van a dar cuando el contenedor sea menor.
|	- Pero nunca una caja va a regresar a su tamaño original antes que otras, siempre llegarán todas las cajas juntas.
|  Flex:
|	- Agrupa las tres anteriores(grow, shrink y basis). flex: 1 1 500px; Toma un espacio, da un espacio y mide 500px.
|  	- Ocupa almenos el primer parámetro(grow).
|  Order:
|	- Es como se van acomodando hacia donde va el main axis, el que tenga el número mayor va al último o primero según 
|	  vaya el grow.
|								**Grid**
|  - Al darle "display: grid;" no se afecta al elementos sino a su contenido.
|  - Los grid-item son solo los hijos del elemento con "display: grid;".
|  - Un track es cada fila y columna que haya, el total de track es la suma de las filas y las columnas.
|  - Grid-cell es cada espacio dentro de un grid-container, puede ser cuadrado o rectangular(cuadrilatero).
|  - Las grid-áreas es la junta de dos o más celdas, porque con una se puede pero no es recomendado. Tiene que ser consecuti-
|    vas, es decir, que no puede haber un área en diagonal. Tanto como horizontal y vértical tiene que ser consecutivas.
|  - Grid line: es cada linea divisoría de las filas y columnas. Cuentan desde la del contenedor.
|  PROPIEDADES DEL CONTAINER
|  grid-template-rows/columns o grid-template: 
|	- Para definir las filas y columnas que tendrá.
|	- Se puede hacer distintas formas. 
|	- Una forma es: "grid-template-rows: 100px 100px;" Que sería dos filas de 100px cada una.
|  grid-row/column-gap o grid-gap:
|	- Es el espacio que hay entre si pero entre el contenedor.
|	- Se define con medidas normales. "10px"
|  PROPIEDADES DEL ITEM
|  grid-row/column-start/end o grid-row/column:
|	- Es para decir desde que linea va a empezar y en cual va a terminar.
|	- Ejemplo: grid-row-star: 1; & grid-row-end: 3; o grid-row: 1 / 3; o grid-row: 1 / span 2; En la 1ra y 2da le decimos
|	  que empiece en la primera linea y termina en la tercera linea. Y en la última le decimos que empiece en la primera
|	  y que tome 2 desde ahí.
|  TIPOS DE GRID
|  - Va en el container.
|  El grid explícito: es el grid que esta programado o definido. Todas las propiedades anteriores.
|  Implícito: el que se crea cuando los elementos no caben en el espacio asignado. Por defecto crea una fila nueva.
|  PROPIEDADES PARA GRID IMPLÍCITO
|  grid-auto-rows/columns: para definir que medidas tendrán las filas/columnas que se creen. El repeat no se usa aquí, solo 
|        	 	   se pone el tamaño que tendrán
|  grid-auto-flow: para decir como se pondrá el espacio que se cree. rows o columns. Y con dense se rellenar los campos 
|		   vacios. Se detecta el elementos más cercano que cabe y se coloca.
|  GRID DINÁMICO
|  min/max-content:
|	- Se ajusta al minímo contenido o al máximo que tenga.
|  minmax(minímo, máximo):
|	- Para definir cuanto va a ser su minímo y máximo.
|  auto-fill: crea la cantidad de filas/columnas que se puedan.
|  auto-fit: ajusta las filas columnas que ya esten hechas.
|  ALINEACIÓN 
|  - Para alinear los items/contenido se utiliza "justify-items" para horizontal y "align-items" para vértical. Pero para 
|    alinear las filas/columnas se utiliza justify-content, align-content).
|  - Para centrar "center", para poner al inicio "start" y para poner al final "end". Por defecto viene con stretch. 
|  - Esto se pone en el containter.
|  - Con los items no funciona las propiedades space-arround, space-evenly, space-between.
|  - Align-self, justify-self, place-self: para alinear individualmente cada elemento. Place es un shorthands que va primero
|    align y luego justify.
|  - Order: es igual que en flex, el número más alto va el final el más bajo al principio.
|  ÁREAS
|  - Se define con nombres.
|  grid-template-areas:
|	"nav nav nav"
|	"main main aside"
|	"main main aside"
|	"footer footer footer";
|  - Luego se da a cada parte su área con "grid-areas: nombre;"
|  NOMBRAR GRID LINES
|  - Se le puede dar nombre a las grid-lines con "grid-template-rows/columns:
|									[nombre]
|									 medida".
|  Medidas de grid:
|	- fr: es para designar el espacio que sobra. Ejemplo: tenemos 3 cajas y a dos de ellas las definimos a 100px, y a la
|	  3ra de poner "1fr" le decimos que el espacio que sobre lo divida en 1 y se lo de.
|	- repeat(cantidad, unidad): repite cuantas veces le digamos(cantidad) la medidas que le digamos(unidad).
|  - Las transiciones en grid no van bien. :c
|  - Grid shorthands: para abreviar grid-template-columns/rows/areas es "grid-template: c, r, a;
|  							  **RESPONSIVE DESIGN**
|  @Media: para consultar medios para aplicar estilos a diferentes dispositivos/resoluciones.
|	- Existen 4 tipos de @Media querys:
|		- All: Apto para todos los dispositivos.
|		- Print: Destinado a la impresión de documentos en pantalla.
|		- Screen: Destinado a pantallas. Es el más usado.
|		- Speech: Destinado a sintetizadores de voz.
|
|	- Operadores:
|		- Or: si se cumple esto OR esto haces...
|		- And: si se cumple esto AND esto haces...
|		- Se puede agregar más de una vez o combinarlos.
|	- Orientación:
|		- Landscape: horizontal. Computadora.
|		- Portrait: vértical. Celular.
|							**Transition**
|  - Es el tiempo en que pasa de un "estado" a otro.
|  transition-property: all o nombre del elemento(background, color, padding, etc), es mejor especificar el elemento porque
|  all consume más recursos.
|  transition-duration: el tiempo que dura la transición.
|  - Estás dos anteriores son OBLIGATORIAS.
|  transition-delay: el tiempo que tarda en empezar la transición.
|  transition-timing-function: es como se va a hacer la transición;
|	- linear: todos los cambios ocurren a la misma velocidad.
|	- ease: Empieza rápido y termina más despacio. Valor por defecto.
|	- ease-in: Empieza despacio y termina más rápido.
|	- ease-out: Empieza rápido y termina lento. Va más lento que ease, ya que es menos brusco.
|	- ease-in-out: Empieza rápido, velocidad media y termina lento.
|	- inherit: hereda el color del container.
|							**Animaciones**
|  - Se usa con @KeyFrames nombre{}.
|  - Se puede crear la animación con for(como está cuando inicio) y to(como está al terminar). O porcentajes(dependiendo 
|    cuando este cambia).
|  - Después se le agrega al elemento con "animation-name: nombre;".
|  - Se le da la duración con "animation-duration: tiempo;". 
|  - Con "animation-iteration-count: numero o infinite;" se dice cuantas veces se va a repetir.
|  - Con "animation-direction: normal, reverse, alternate, alternate-reverse;" se dice como va ir la animación(reverse solo 
|    funcion si el iteration es mayor a 1).
|  - También, está para decir como se hará con "animation-timing-function: ease, ease-in, etc;" que se comporta 
|    igual que con transition. 
|  - "animation-fill-mode: none, forwards, both" como va a terminar, con none, igual que como empezó, con forwards como lo 
|    definimos al final de la animación, y both empieza con el valor que le decimos.
|						 **Cubic Bezier**
|  - Es la curva de como se realiza una transición o animación.
|  - Esto se agrega al "transition/animation-timing-function: cubic-bezier(uff xd);"
|							**Transform**
|  - Es transformar un objeto. 
|  - Una forma es trasladandolo, con "transform: traslateX(100%),traslateY(80px);" si la caja mide 80px, moverlo 100% equiva-
|    le a eso porque sería mover completamente. Se puede acortar con "traslate(x,y)".
|  - Otra forma haciendo que cambie su tamaño, con "transform: scale(2)", cada número equivale a una vez el elemento. También
|    puede ser en los distintos ejes "scaleX/Y() o scale(x,y)".
|  - Al ponerlo con un evento, durante este solo tendrá los valores que se le pongan(los de transform) para que los mantenga
|    se le tiene que agregar.
|  - También cambiandole la forma, con "transform: skew(10deg,)".
|  - Para las animaciones es mejor usar el traslate porque el leff,right,top, bottom consumen más recursos.
| 							    **Clip path**
|  - Clip path: es para hacer formas. "clip-path: figura(medidas);" 
|  								**Background**
|  background-size: valor; es para darle medidas al fondo, tiene las mismas que object-fit.
|  background-clip: border-box, content-box, padding-box; desde donde tiene que enseñar la imágen.
|  background-image: url(url xd, externa o local); es para poner de fondo una imágen
|  background-origin: border-box, content-box, padding-box; desde donde va a empezar y terminar.
|  background-position: left, right, top, bottom, center + left, right, top, bottom, center; Toma dos y coloca la imágen.
|  background-attachment: scroll, fixed; para colocar el fondo dependiendo del contenido.
|								**Variables**
|  - Para definir una y asignarla como el color de background, color, etc.
|  - Existen dos tipos:
|	- Las globales: que se pueden utilizar desde cualquier elemento.
|	- Las locales: que solo se pueden utilizar donde fueron creadas.
|  - Para crearlas:
|	:root[root es para globales]/p[aquí seria solo para las etiquetas "p"]{
|	      --color-rojo: #932;}
|  - Para agregarlas:
|	background: var(color-rojo);
|							**Filtros**
|  - Para dar filtro a una imágen.
|  blur(); desenfocar. No funciona con %.
|  brightess(0-1); el nivel de brillo. Se puede más pero brilla más que ella xd. No va a medidas.
|  contrast(); el nivel de contraste. La hace más llamativa. No va a medidas.
|  drop-shadow(10px 10px 10px #000); sirve para darle sombra a imágenes transparentes(png). Si se pega más veces se intensifi
|                                    ca.
|  grayscale(nada o 1 es lo mismo, más de uno ya no afecta, asi que es de 0 al 1 o %'s); se define a gris.
|  hue-rotate(deg); invierte la gama de colores(según al circulo cromático creo). Rota la gama.
|  invert(%); invierte los colores. Es decir, el color contrario(rojo-azul)
|  opacity(0-1); la opacidad de la imágen.
|  saturate(%); la saturación de la imágen. Intensifica el color.
|  sepia(0-1); se vuelve sepia y ya xd.
|  url(); busca XD
|							**Direction**
|  - Cambia la dirección: "direction: ltr o rtl;"
|							**Letter Spacing**
|  - El espacio entre las letras. "letter-spacing: 1px;"
|							**Scroll Behavior**
|  - Suavizar el scroll cuando se usa una botón para bajar. "scroll-behavior: smooth;"
|							**User selected**
|  - Poder seleccionar o no un texto. "user-selected: none;"
|
|
|
|							**Documentación**
|  - https://www.w3school.com/
|  - https://developer.mozilla.org/es/docs/Web/
|----------------------------------------------------------------------------------------------------------------------------
